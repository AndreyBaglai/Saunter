{"version":3,"sources":["components/Logo/Logo.module.scss","components/PathsListWrapper/PathsListWrapper.module.scss","components/Button/CustomButton.module.scss","components/Header/Header.module.scss","components/Map/Map.module.scss","components/Main/Main.module.scss","App.module.scss","store/pathsSlice.ts","store/formSlice.ts","store/currentPathSlice.ts","store/directionsSlice.ts","store/store.ts","components/Logo/Logo.tsx","components/Button/CustomButton.tsx","components/Header/Header.tsx","components/Map/Map.tsx","services/localStorage.ts","components/PathView/PathView.tsx","components/ListPaths/ListPaths.tsx","components/PathsListWrapper/PathsListWrapper.tsx","components/Main/Main.tsx","components/Form/FormModal.tsx","App.tsx","index.tsx","components/Form/FormModal.module.scss","components/ListPaths/ListPaths.module.scss","components/PathView/PathView.module.scss"],"names":["module","exports","pathsSlice","createSlice","name","initialState","id","title","description","short","full","favorite","selected","distance","directions","lat","lng","reducers","add","state","action","payload","loadFromLS","remove","filter","path","setFavorite","find","item","newState","removeFavorite","select","forEach","formSlice","isOpen","open","close","currentPathSlice","set","directionsSlice","clean","configureStore","reducer","paths","pathsReducer","form","formReducer","currentPath","currentPathReducer","directionsReducer","Logo","className","styles","logoWrapper","AppstoreTwoTone","twoToneColor","icon","Text","text","strong","CustomButton","size","shape","htmlType","handleFunc","onClick","customBtn","type","Header","dispatch","useDispatch","header","extra","Map","isEdit","isSetMarkers","pathInfo","useSelector","useEffect","map","poly","Loader","apiKey","process","version","load","then","mapContainer","document","getElementById","google","maps","center","zoom","Polyline","strokeColor","strokeOpacity","strokeWeight","setMap","addListener","e","getPath","push","latLng","dataCoords","Be","coords","coord","Marker","position","getLength","markerCoords","mapWrapper","COLLECTION_PATHS","setPathsToLS","localStorage","removeItem","setItem","JSON","stringify","getPathsFromLS","getItem","parse","updateFavoritePathByLS","length","updatePaths","sort","a","b","PathView","selectPath","useState","setPathInfo","isUpdateBtn","setIsUpdateBtn","pathView","Object","keys","headStyle","color","fontSize","card","fullDescription","wrapperBtn","data-id","block","target","currentTarget","dataset","danger","removePathFromLS","defaultText","ListPaths","filterPaths","onSelectedPath","onSetFavorite","onRemoveFavorite","list","dataSource","bordered","locale","emptyText","renderItem","Item","listItem","Meta","meta","avatar","EnvironmentTwoTone","itemMarker","StarFilled","style","StarOutlined","itemTitle","Paragraph","RightOutlined","leftArrow","PathsListWrapper","pathsState","setFilterPaths","fieldValue","setFieldValue","pathsFromLS","toLowerCase","includes","onClearSearchField","listWrapper","span","value","inputSearch","placeholder","onChange","suffix","CloseCircleFilled","Main","main","justify","rootFormContainer","FormModal","totalDistance","setTotalDistance","includeMarkers","setIncludeMarkers","allPaths","countDistance","destination","origin","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","TravelMode","DRIVING","response","status","rows","elements","Number","toFixed","err","console","log","ReactDOM","createPortal","modalWrapper","modalTitle","CloseOutlined","modal","layout","onFinish","formData","message","error","newPath","nanoid","shortText","fullText","formField","label","rules","required","max","TextArea","removeBtn","App","app","render","store"],"mappings":"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","file":"static/js/main.caa734ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Logo_text__1FyMF\",\"icon\":\"Logo_icon__2vGRc\",\"logoWrapper\":\"Logo_logoWrapper__iHV3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrapper\":\"PathsListWrapper_listWrapper__oVBvQ\",\"inputSearch\":\"PathsListWrapper_inputSearch__23jv8\",\"icon\":\"PathsListWrapper_icon__3IP5A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"customBtn\":\"CustomButton_customBtn__xmFnk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2z55g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapWrapper\":\"Map_mapWrapper__2ULhj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__3fHNf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2PWlB\"};","import { createSlice } from '@reduxjs/toolkit';\r\nimport { PathModel } from 'model/path-model';\r\n\r\nconst initialState = [\r\n  {\r\n    id: 'dhfhdhj',\r\n    title: 'Test path',\r\n    description: {\r\n      short: 'Some short text',\r\n      full: 'Some full text',\r\n    },\r\n    favorite: false,\r\n    selected: false,\r\n    distance: 0.534,\r\n    directions: [\r\n      { lat: 48.4499013737848, lng: 34.98049320537708 },\r\n      { lat: 48.448591982505036, lng: 34.98019279796741 },\r\n    ],\r\n  },\r\n];\r\n\r\nconst pathsSlice = createSlice({\r\n  name: 'paths',\r\n  initialState,\r\n  reducers: {\r\n    add(state, action) {\r\n      return [...state, action.payload];\r\n    },\r\n\r\n    loadFromLS(state, action) {\r\n      return [...action.payload];\r\n    },\r\n\r\n    remove(state, action) {\r\n      return state.filter((path) => path.id !== action.payload);\r\n    },\r\n\r\n    setFavorite(state, action) {\r\n      let path = state.find((item) => item.id === action.payload) as PathModel;\r\n      const newState = state.filter((path) => path.id !== action.payload);\r\n\r\n      path = { ...path, favorite: true };\r\n      return [path, ...newState];\r\n    },\r\n\r\n    removeFavorite(state, action) {\r\n      let path = state.find((item) => item.id === action.payload) as PathModel;\r\n      const newState = state.filter((path) => path.id !== action.payload);\r\n\r\n      path = { ...path, favorite: false };\r\n      return [...newState, path];\r\n    },\r\n\r\n    select(state, action) {\r\n      state.forEach((path) => {\r\n        path.id === action.payload ? (path.selected = true) : (path.selected = false);\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport default pathsSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  isOpen: false,\r\n};\r\n\r\nconst formSlice = createSlice({\r\n  name: 'form',\r\n  initialState,\r\n  reducers: {\r\n    open(state, action) {\r\n      return { ...state, isOpen: action.payload };\r\n    },\r\n    \r\n    close(state, action) {\r\n      return { ...state, isOpen: action.payload };\r\n    },\r\n  },\r\n});\r\n\r\nexport default formSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {};\r\n\r\nconst currentPathSlice = createSlice({\r\n  name: 'currentPath',\r\n  initialState,\r\n  reducers: {\r\n    set(state, action) {\r\n      return { ...action.payload };\r\n    },\r\n\r\n    remove(state, action) {\r\n      return action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport default currentPathSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {};\r\n\r\nconst directionsSlice = createSlice({\r\n  name: 'directions',\r\n  initialState,\r\n  reducers: {\r\n    add(state, action) {\r\n      return [...action.payload];\r\n    },\r\n    \r\n    clean(state, action) {\r\n      return action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport default directionsSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport pathsReducer from './pathsSlice';\r\nimport formReducer from './formSlice';\r\nimport currentPathReducer from './currentPathSlice';\r\nimport directionsReducer from './directionsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    paths: pathsReducer,\r\n    form: formReducer,\r\n    currentPath: currentPathReducer,\r\n    directions: directionsReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport { Typography } from 'antd';\r\nimport { AppstoreTwoTone } from '@ant-design/icons';\r\n\r\nimport styles from './Logo.module.scss';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className={styles.logoWrapper}>\r\n      <AppstoreTwoTone twoToneColor=\"#9aed00\" className={styles.icon} />\r\n      <Typography.Text className={styles.text} strong={true}>\r\n        Saunter\r\n      </Typography.Text>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { SizeType } from 'antd/lib/config-provider/SizeContext';\r\n\r\nimport styles from './CustomButton.module.scss';\r\n\r\ntype CustomButtonPropsType = {\r\n  text: string;\r\n  size: SizeType;\r\n  htmlType?: any;\r\n  shape?: any;\r\n  icon?: any;\r\n  handleFunc: any;\r\n};\r\n\r\nconst CustomButton = ({\r\n  text = '',\r\n  size = 'middle',\r\n  shape = 'round',\r\n  icon,\r\n  htmlType = 'button',\r\n  handleFunc = () => {},\r\n}: CustomButtonPropsType) => {\r\n  return (\r\n    <Button\r\n      onClick={handleFunc}\r\n      className={styles.customBtn}\r\n      size={size}\r\n      type=\"ghost\"\r\n      shape={shape}\r\n      icon={icon}\r\n      htmlType={htmlType}>\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from 'react';\r\nimport { PageHeader } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport Logo from 'components/Logo/Logo';\r\nimport CustomButton from 'components/Button/CustomButton';\r\n\r\nimport styles from './Header.module.scss';\r\n\r\nconst Header = () => {\r\n  const dispatch = useDispatch();\r\n  const onOpenForm = () => dispatch({ type: 'form/open', payload: true });\r\n\r\n  return (\r\n    <PageHeader\r\n      className={`row ${styles.header}`}\r\n      title={<Logo />}\r\n      extra={[\r\n        <CustomButton\r\n          key=\"1\"\r\n          size=\"large\"\r\n          text=\"Add path\"\r\n          htmlType=\"button\"\r\n          handleFunc={onOpenForm}></CustomButton>,\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\n\r\nimport { StoreModel } from 'model/store-model';\r\n\r\nimport styles from './Map.module.scss';\r\n\r\ntype MapPropsType = {\r\n  id: string;\r\n  isEdit: boolean;\r\n  isSetMarkers: boolean;\r\n  path?: any;\r\n};\r\n\r\nconst Map = ({ id, isEdit, isSetMarkers }: MapPropsType) => {\r\n  const pathInfo = useSelector((state: StoreModel) => state.currentPath);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    let map: google.maps.Map<HTMLElement>;\r\n    let poly: any;\r\n\r\n    const loader = new Loader({\r\n      apiKey: `${process.env.REACT_APP_API_KEY}`,\r\n      version: 'weekly',\r\n    });\r\n\r\n    loader.load().then(() => {\r\n      const mapContainer = document.getElementById(id) as HTMLElement;\r\n\r\n      if (mapContainer) {\r\n        map = new google.maps.Map(mapContainer, {\r\n          center: { lat: 48.450001, lng: 34.983334 },\r\n          zoom: 15,\r\n        });\r\n\r\n        poly = new google.maps.Polyline({\r\n          strokeColor: '#9aed00',\r\n          strokeOpacity: 1.0,\r\n          strokeWeight: 3,\r\n        });\r\n\r\n        poly.setMap(map);\r\n\r\n        // Add a listener for the click event\r\n        isEdit &&\r\n          map.addListener('click', (e: google.maps.MapMouseEvent) => {\r\n            const path = poly.getPath();\r\n\r\n            // Because path is an MVCArray, we can simply append a new coordinate\r\n            // and it will automatically appear.\r\n            path.push(e.latLng);\r\n\r\n            const dataCoords = poly.getPath().Be || [];\r\n            const coords = dataCoords.map((coord: any) => ({ lat: coord.lat(), lng: coord.lng() }));\r\n\r\n            if (dataCoords) {\r\n              dispatch({ type: 'directions/add', payload: coords });\r\n            }\r\n\r\n            // Add a new marker at the new plotted point on the polyline.\r\n            new google.maps.Marker({\r\n              position: e.latLng,\r\n              title: '#' + path.getLength(),\r\n              map,\r\n            });\r\n          });\r\n\r\n        // Set polyline on map\r\n        !isEdit &&\r\n          pathInfo?.directions &&\r\n          (poly = new google.maps.Polyline({\r\n            path: [\r\n              ...pathInfo?.directions.map((coord: any) => ({\r\n                lat: coord.lat,\r\n                lng: coord.lng,\r\n              })),\r\n            ],\r\n            strokeColor: '#9aed00',\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 3,\r\n          }));\r\n\r\n        poly.setMap(map);\r\n\r\n        // Set markers on map\r\n        !isEdit &&\r\n          pathInfo?.directions &&\r\n          pathInfo.directions.forEach((markerCoords: any) => {\r\n            new google.maps.Marker({\r\n              position: {\r\n                lat: markerCoords.lat,\r\n                lng: markerCoords.lng,\r\n              },\r\n              map,\r\n            });\r\n          });\r\n      }\r\n    });\r\n  }, [isEdit, isSetMarkers, pathInfo, id]);\r\n\r\n  return <div id={id} className={styles.mapWrapper}></div>;\r\n};\r\n\r\nexport default Map;\r\n","import { PathModel } from 'model/path-model';\r\n\r\nconst COLLECTION_PATHS = 'paths';\r\n\r\nexport const setPathsToLS = (paths: PathModel[]) => {\r\n  localStorage.removeItem(COLLECTION_PATHS);\r\n  localStorage.setItem(COLLECTION_PATHS, JSON.stringify(paths));\r\n};\r\n\r\nexport const getPathsFromLS = (): PathModel[] | [] => {\r\n  const paths = localStorage.getItem(COLLECTION_PATHS);\r\n  if (paths) return JSON.parse(paths);\r\n  return [];\r\n};\r\n\r\nexport const removePathFromLS = (id: string) => {\r\n  const paths = getPathsFromLS();\r\n  if (paths.length) {\r\n    const updatePaths = paths.filter((paths: PathModel) => paths.id !== id);\r\n    setPathsToLS(updatePaths);\r\n  }\r\n};\r\n\r\nexport const updateFavoritePathByLS = (id: string) => {\r\n  const paths = getPathsFromLS();\r\n  if (paths.length) {\r\n    const updatePaths = paths\r\n      .map((path: PathModel) => {\r\n        if (path.id === id) path.favorite = !path.favorite;\r\n        return path;\r\n      })\r\n      .sort((a: PathModel, b: PathModel) => (a.favorite === b.favorite ? 0 : a.favorite ? -1 : 1));\r\n    setPathsToLS(updatePaths);\r\n  }\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Col, Button, Card, Typography } from 'antd';\r\n\r\nimport Map from 'components/Map/Map';\r\n\r\nimport { StoreModel } from 'model/store-model';\r\nimport { PathModel } from 'model/path-model';\r\nimport { removePathFromLS, updateFavoritePathByLS } from 'services/localStorage';\r\n\r\nimport styles from './PathView.module.scss';\r\n\r\nconst PathView = () => {\r\n  const selectPath: any = useSelector((state: StoreModel) => state.currentPath);\r\n\r\n  const [pathInfo, setPathInfo] = useState<PathModel | null>(null);\r\n  const [isUpdateBtn, setIsUpdateBtn] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    setPathInfo(selectPath);\r\n  }, [pathInfo, selectPath, isUpdateBtn]);\r\n\r\n  const onRemovePath = (e: React.MouseEvent) => {\r\n    const target = e.currentTarget as HTMLElement;\r\n    const id = target.dataset.id as string;\r\n\r\n    setPathInfo(null);\r\n    removePathFromLS(id);\r\n\r\n    dispatch({ type: 'paths/remove', payload: id });\r\n    dispatch({ type: 'currentPath/remove', payload: null });\r\n  };\r\n\r\n  const onSetFavorite = (e: React.MouseEvent) => {\r\n    const target = e.currentTarget as HTMLElement;\r\n    const id =  target.dataset.id as string;\r\n    \r\n    setIsUpdateBtn(true);\r\n    updateFavoritePathByLS(id);\r\n    dispatch({ type: 'paths/setFavorite', payload: id });\r\n  };\r\n\r\n  const onRemoveFavorite = (e: React.MouseEvent) => {\r\n    const target = e.currentTarget as HTMLElement;\r\n    const id =  target.dataset.id as string;\r\n\r\n    updateFavoritePathByLS(id);\r\n    setIsUpdateBtn(false);\r\n    dispatch({ type: 'paths/removeFavorite', payload: target.dataset.id });\r\n  };\r\n\r\n  return (\r\n    <Col className={`col-xl-5 offset-xl-1 col-lg-5 offset-lg-1 col-md-5 offset-md-1 col-sm-12 ${styles.pathView}`}>\r\n      {pathInfo && Object.keys(selectPath).length ? (\r\n        <Card\r\n          headStyle={{ color: '#fff', fontSize: '24px' }}\r\n          className={styles.card}\r\n          title={pathInfo.title}\r\n          extra={<h5 className={styles.distance}>{pathInfo.distance} km</h5>}>\r\n          <p className={styles.fullDescription}>{pathInfo.description?.full}</p>\r\n\r\n          <Map id=\"pathMap\" isEdit={false} isSetMarkers={true} />\r\n\r\n          <div className={styles.wrapperBtn}>\r\n            {!pathInfo.favorite && !isUpdateBtn ? (\r\n              <Button data-id={pathInfo.id} block type=\"link\" onClick={onSetFavorite}>\r\n                Add to favorite\r\n              </Button>\r\n            ) : (\r\n              <Button data-id={pathInfo.id} block type=\"link\" onClick={onRemoveFavorite}>\r\n                Remove from favorite\r\n              </Button>\r\n            )}\r\n            <Button data-id={pathInfo.id} block type=\"link\" danger onClick={onRemovePath}>\r\n              Remove\r\n            </Button>\r\n          </div>\r\n        </Card>\r\n      ) : (\r\n        <Typography.Text className={styles.defaultText}>Select any path</Typography.Text>\r\n      )}\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default PathView;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { List, Typography } from 'antd';\r\nimport { EnvironmentTwoTone, RightOutlined, StarFilled, StarOutlined } from '@ant-design/icons';\r\n\r\nimport { updateFavoritePathByLS } from 'services/localStorage';\r\nimport { StoreModel } from 'model/store-model';\r\nimport { PathModel } from 'model/path-model';\r\n\r\nimport styles from './ListPaths.module.scss';\r\n\r\ntype ListPathPropsType = {\r\n  filterPaths: PathModel[];\r\n};\r\n\r\nconst ListPaths = ({ filterPaths }: ListPathPropsType) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onSelectedPath = (e: React.MouseEvent) => {\r\n    const target = e.currentTarget as HTMLElement;\r\n    const path = filterPaths.find((path: PathModel) => path.id === target.id);\r\n\r\n    dispatch({ type: 'paths/select', payload: target.id });\r\n    dispatch({\r\n      type: 'currentPath/set',\r\n      payload: path,\r\n    });\r\n  };\r\n\r\n  const onSetFavorite = (e: React.MouseEvent) => {\r\n    const target = e.currentTarget as HTMLElement;\r\n    const id = target.dataset.id as string;\r\n\r\n    updateFavoritePathByLS(id);\r\n    dispatch({ type: 'paths/setFavorite', payload: id });\r\n  };\r\n\r\n  const onRemoveFavorite = (e: React.MouseEvent) => {\r\n    const target = e.currentTarget as HTMLElement;\r\n    const id = target.dataset.id as string;\r\n\r\n    updateFavoritePathByLS(id);\r\n    dispatch({ type: 'paths/removeFavorite', payload: target.dataset.id });\r\n  };\r\n\r\n  return (\r\n    <List\r\n      className={styles.list}\r\n      dataSource={filterPaths}\r\n      bordered={true}\r\n      locale={{\r\n        emptyText: <Typography.Text className={styles.emptyText}>No more paths</Typography.Text>,\r\n      }}\r\n      renderItem={(path: PathModel) => (\r\n        <List.Item\r\n          key={path.id}\r\n          className={`container px-md-2 px-lg-6 ${styles.listItem}`}\r\n          id={path.id}\r\n          onClick={onSelectedPath}>\r\n          <List.Item.Meta\r\n            className={styles.meta}\r\n            avatar={\r\n              <EnvironmentTwoTone\r\n                className={`d-none d-md-block ${styles.itemMarker}`}\r\n                twoToneColor=\"true\"\r\n              />\r\n            }\r\n            title={\r\n              <>\r\n                {path.favorite ? (\r\n                  <StarFilled\r\n                    data-id={path.id}\r\n                    style={{ color: 'yellow' }}\r\n                    onClick={onRemoveFavorite}\r\n                  />\r\n                ) : (\r\n                  <StarOutlined\r\n                    data-id={path.id}\r\n                    style={{ color: 'yellow' }}\r\n                    onClick={onSetFavorite}\r\n                  />\r\n                )}\r\n                <Typography.Text className={styles.itemTitle}>{path.title}</Typography.Text>\r\n              </>\r\n            }\r\n            description={\r\n              <Typography.Paragraph className={`d-none d-md-block ${styles.description}`}>\r\n                {path.description.short}\r\n              </Typography.Paragraph>\r\n            }\r\n          />\r\n\r\n          <Typography.Text className={styles.distance}>{`${path.distance} km`}</Typography.Text>\r\n          <RightOutlined className={`d-none d-md-block ${styles.leftArrow}`} />\r\n        </List.Item>\r\n      )}></List>\r\n  );\r\n};\r\n\r\nexport default ListPaths;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Col, Input, Row } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport ListPaths from 'components/ListPaths/ListPaths';\r\nimport { CloseCircleFilled } from '@ant-design/icons';\r\n\r\nimport { StoreModel } from 'model/store-model';\r\nimport { PathModel } from 'model/path-model';\r\n\r\nimport styles from './PathsListWrapper.module.scss';\r\nimport { getPathsFromLS } from 'services/localStorage';\r\n\r\nconst PathsListWrapper = () => {\r\n  const pathsState = useSelector((state: StoreModel) => state.paths);\r\n\r\n  const [filterPaths, setFilterPaths] = useState<PathModel[]>(pathsState);\r\n  const [fieldValue, setFieldValue] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const pathsFromLS = getPathsFromLS();\r\n    if (pathsFromLS.length > 0) {\r\n      setFilterPaths(pathsFromLS);\r\n      dispatch({ type: 'paths/loadFromLS', payload: pathsFromLS });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (fieldValue) {\r\n      const filterPaths = pathsState.filter(\r\n        (path: PathModel) =>\r\n          path.title.toLowerCase().includes(fieldValue.toLowerCase()) ||\r\n          path.description.short.toLowerCase().includes(fieldValue.toLowerCase()),\r\n      );\r\n\r\n      setFilterPaths(filterPaths);\r\n    } else {\r\n      setFilterPaths(pathsState);\r\n    }\r\n  }, [pathsState]);\r\n\r\n  const onClearSearchField = () => {\r\n    setFieldValue('');\r\n    setFilterPaths(pathsState);\r\n  };\r\n\r\n  const onFilterPaths = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n\r\n    if (value === '') {\r\n      onClearSearchField();\r\n    }\r\n\r\n    // sort by fields\r\n    const filterPaths = pathsState.filter(\r\n      (path: PathModel) =>\r\n        path.title.toLowerCase().includes(value.toLowerCase()) ||\r\n        path.description.short.toLowerCase().includes(value.toLowerCase()),\r\n    );\r\n\r\n    setFieldValue(value);\r\n    setFilterPaths(filterPaths);\r\n  };\r\n\r\n  return (\r\n    <Col className={`col-xl-6 col-lg-6 col-md-6 col-sm-12 ${styles.listWrapper}`}>\r\n      <Row>\r\n        <Col span={24}>\r\n          <Input\r\n            value={fieldValue}\r\n            id=\"search\"\r\n            className={styles.inputSearch}\r\n            placeholder=\"Input search text\"\r\n            onChange={onFilterPaths}\r\n            suffix={<CloseCircleFilled onClick={onClearSearchField} className={styles.icon} />}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <ListPaths filterPaths={filterPaths} />\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default PathsListWrapper;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n\r\nimport PathView from 'components/PathView/PathView';\r\nimport PathsListWrapper from 'components/PathsListWrapper/PathsListWrapper';\r\n\r\nimport styles from './Main.module.scss';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <main className={`row ${styles.main}`}>\r\n      <Row justify=\"space-around\" className=\"row\">\r\n        <PathsListWrapper />\r\n        <PathView />\r\n      </Row>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { CloseOutlined } from '@ant-design/icons';\r\nimport { Col, PageHeader, Row, Typography, Form, Input, message } from 'antd';\r\n\r\nimport CustomButton from 'components/Button/CustomButton';\r\nimport Map from 'components/Map/Map';\r\nimport { setPathsToLS } from 'services/localStorage';\r\n\r\nimport { StoreModel } from 'model/store-model';\r\nimport { PathModel } from 'model/path-model';\r\nimport { FormDataModel } from 'model/formData-model';\r\n\r\nimport styles from './FormModal.module.scss';\r\n\r\nconst rootFormContainer = document.getElementById('root-form') as HTMLElement;\r\n\r\nconst FormModal = () => {\r\n  const [totalDistance, setTotalDistance] = useState(0);\r\n  const [includeMarkers, setIncludeMarkers] = useState(false);\r\n\r\n  const isOpen = useSelector((state: StoreModel) => state.form.isOpen);\r\n  const allPaths = useSelector((state: StoreModel) => state.paths);\r\n  const directions = useSelector((state: StoreModel) => state.directions);\r\n  const dispatch = useDispatch();\r\n\r\n  const countDistance = async (destination: any, origin: any) => {\r\n    const service = new google.maps.DistanceMatrixService();\r\n\r\n    service.getDistanceMatrix(\r\n      {\r\n        origins: [{ lat: origin.lat, lng: origin.lng }, 'Start'],\r\n        destinations: ['End', { lat: destination.lat, lng: destination.lng }],\r\n        travelMode: google.maps.TravelMode.DRIVING,\r\n      },\r\n      (response, status) => {\r\n        if (status === 'OK') {\r\n          setTotalDistance((state) => {\r\n            try {\r\n              state += response.rows[0].elements[1].distance.value / 1000;\r\n              return Number(state.toFixed(3));\r\n            } catch (err) {\r\n              console.log('Failed to build routes');\r\n              setIncludeMarkers(!includeMarkers);\r\n              dispatch({ type: 'directions/clean', payload: [] });\r\n              return 0;\r\n            }\r\n          });\r\n        }\r\n      },\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    if (directions.length > 1) {\r\n      const destination = directions[directions.length - 1];\r\n      const origin = directions[directions.length - 2];\r\n      countDistance(destination, origin);\r\n    }\r\n  }, [directions]);\r\n\r\n  const onCloseForm = () => {\r\n    setTotalDistance(0);\r\n    dispatch({ type: 'form/close', payload: false });\r\n    dispatch({ type: 'directions/clean', payload: [] });\r\n  };\r\n\r\n  const onRemoveMarkers = () => {\r\n    setTotalDistance(0);\r\n    setIncludeMarkers(!includeMarkers);\r\n    dispatch({ type: 'directions/clean', payload: [] });\r\n  };\r\n\r\n  const onCreatePath = (formData: FormDataModel) => {\r\n    if (totalDistance === 0 || directions.length < 2) {\r\n      message.error('Please, add minimum two markers on map');\r\n      return;\r\n    }\r\n\r\n    const newPath: PathModel = {\r\n      id: nanoid(),\r\n      title: formData.title,\r\n      description: {\r\n        short: formData.shortText,\r\n        full: formData.fullText,\r\n      },\r\n      selected: false,\r\n      distance: totalDistance,\r\n      favorite: false,\r\n      directions,\r\n    };\r\n\r\n    setTotalDistance(0);\r\n    dispatch({ type: 'paths/add', payload: newPath });\r\n    dispatch({ type: 'form/close', payload: false });\r\n    dispatch({ type: 'directions/clean', payload: [] });\r\n\r\n    setPathsToLS([...allPaths, newPath]);\r\n  };\r\n\r\n  return isOpen\r\n    ? ReactDOM.createPortal(\r\n        <Row className={`container ${styles.modalWrapper}`}>\r\n          <Col className=\"row col-md-8 offset-md-2 col-10 offset-1\">\r\n            <PageHeader\r\n              className={styles.modalTitle}\r\n              title={<Typography.Text className={styles.title}>Add new path</Typography.Text>}\r\n              extra={[\r\n                <CustomButton\r\n                  handleFunc={onCloseForm}\r\n                  key=\"2\"\r\n                  shape=\"circle\"\r\n                  icon={<CloseOutlined />}\r\n                  size=\"middle\"\r\n                  text=\"\"\r\n                />,\r\n              ]}\r\n            />\r\n\r\n            <Row className={`container ${styles.modal}`}>\r\n              <Col className=\"col-md-6 col-12\">\r\n                <Form\r\n                  className={`${styles.form}`}\r\n                  layout=\"vertical\"\r\n                  name=\"new-path\"\r\n                  onFinish={onCreatePath}>\r\n                  <Form.Item\r\n                    className={styles.formField}\r\n                    name=\"title\"\r\n                    label=\"Title\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: 'Please, input title path',\r\n                      },\r\n                      {\r\n                        max: 12,\r\n                        message: 'Title must be not more 12 symbols',\r\n                      },\r\n                    ]}>\r\n                    <Input />\r\n                  </Form.Item>\r\n\r\n                  <Form.Item\r\n                    className={styles.formField}\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: 'Please, input short description path',\r\n                      },\r\n                      {\r\n                        max: 40,\r\n                        message: 'Text must be not more 40 symbols',\r\n                      },\r\n                    ]}\r\n                    name=\"shortText\"\r\n                    label=\"Short description\">\r\n                    <Input.TextArea />\r\n                  </Form.Item>\r\n\r\n                  <Form.Item\r\n                    className={styles.formField}\r\n                    name=\"fullText\"\r\n                    label=\"Full description\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: 'Please, input full description path',\r\n                      },\r\n                      {\r\n                        max: 160,\r\n                        message: 'Text must be not more 160 symbols',\r\n                      },\r\n                    ]}>\r\n                    <Input.TextArea />\r\n                  </Form.Item>\r\n\r\n                  <Form.Item>\r\n                    <Typography.Text\r\n                      className={styles.distance}>{`Length: ${totalDistance} km`}</Typography.Text>\r\n                  </Form.Item>\r\n\r\n                  <Form.Item>\r\n                    <CustomButton\r\n                      handleFunc={() => {}}\r\n                      text=\"Add path\"\r\n                      size=\"large\"\r\n                      htmlType=\"submit\"\r\n                    />\r\n                  </Form.Item>\r\n                </Form>\r\n              </Col>\r\n\r\n              <Col className={`col-md-5 offset-md-1 col-12 ${styles.mapWrapper}`}>\r\n                <Map id=\"mapForm\" isEdit={true} isSetMarkers={includeMarkers} />\r\n                <div className={styles.removeBtn}>\r\n                  <CustomButton\r\n                    text=\"Remove markers\"\r\n                    size=\"middle\"\r\n                    shape=\"round\"\r\n                    handleFunc={onRemoveMarkers}\r\n                  />\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>,\r\n        rootFormContainer,\r\n      )\r\n    : ReactDOM.createPortal('', rootFormContainer);\r\n};\r\n\r\nexport default FormModal;\r\n","import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\n\nimport Header from 'components/Header/Header';\nimport Main from 'components/Main/Main';\nimport FormModal from 'components/Form/FormModal';\n\nimport styles from 'App.module.scss';\n\nconst App = () => {\n  return (\n    <div className={`container-fluid ${styles.app}`}>\n      <Header />\n      <Main />\n      <FormModal />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from 'store/store';\n\nimport App from 'App';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"FormModal_modalWrapper__2a4lz\",\"title\":\"FormModal_title__1T0vG\",\"modal\":\"FormModal_modal__1HnlG\",\"modalTitle\":\"FormModal_modalTitle__1uKxB\",\"form\":\"FormModal_form__x07At\",\"formField\":\"FormModal_formField__1Ydgf\",\"mapWrapper\":\"FormModal_mapWrapper__3P6yy\",\"distance\":\"FormModal_distance__2leQ1\",\"removeBtn\":\"FormModal_removeBtn__3cN9g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ListPaths_list__rro4o\",\"listItem\":\"ListPaths_listItem__16vyR\",\"title\":\"ListPaths_title__1tkdl\",\"description\":\"ListPaths_description__w3NqW\",\"distance\":\"ListPaths_distance__3b9FW\",\"itemMarker\":\"ListPaths_itemMarker__2LcTJ\",\"leftArrow\":\"ListPaths_leftArrow__3QH8p\",\"emptyText\":\"ListPaths_emptyText__3XB7P\",\"itemTitle\":\"ListPaths_itemTitle__28ogw\",\"meta\":\"ListPaths_meta__29dXu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pathView\":\"PathView_pathView__1vzgd\",\"card\":\"PathView_card__3d2OC\",\"fullDescription\":\"PathView_fullDescription__1B-9n\",\"distance\":\"PathView_distance__IfJ98\",\"wrapperBtn\":\"PathView_wrapperBtn__MlrlE\",\"defaultText\":\"PathView_defaultText__2UZHk\"};"],"sourceRoot":""}